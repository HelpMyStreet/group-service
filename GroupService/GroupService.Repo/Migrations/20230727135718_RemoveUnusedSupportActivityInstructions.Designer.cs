// <auto-generated />
using System;
using GroupService.Repo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GroupService.Repo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230727135718_RemoveUnusedSupportActivityInstructions")]
    partial class RemoveUnusedSupportActivityInstructions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.ActivityCredentialSet", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnName("ActivityID")
                        .HasColumnType("int");

                    b.Property<int>("CredentialSetId")
                        .HasColumnName("CredentialSetID")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "ActivityId", "CredentialSetId");

                    b.ToTable("ActivityCredentialSet","Group");

                    b.HasData(
                        new
                        {
                            GroupId = -7,
                            ActivityId = 1,
                            CredentialSetId = 7,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -7,
                            ActivityId = 2,
                            CredentialSetId = 7,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -7,
                            ActivityId = 11,
                            CredentialSetId = 7,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -7,
                            ActivityId = 15,
                            CredentialSetId = 7,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -7,
                            ActivityId = 1,
                            CredentialSetId = 71,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -7,
                            ActivityId = 2,
                            CredentialSetId = 71,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -7,
                            ActivityId = 11,
                            CredentialSetId = 71,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -7,
                            ActivityId = 15,
                            CredentialSetId = 71,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -6,
                            ActivityId = 1,
                            CredentialSetId = 6,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -6,
                            ActivityId = 2,
                            CredentialSetId = 6,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -6,
                            ActivityId = 3,
                            CredentialSetId = 6,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -6,
                            ActivityId = 5,
                            CredentialSetId = 6,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -6,
                            ActivityId = 6,
                            CredentialSetId = 6,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -6,
                            ActivityId = 7,
                            CredentialSetId = 6,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -6,
                            ActivityId = 10,
                            CredentialSetId = 6,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -6,
                            ActivityId = 11,
                            CredentialSetId = 6,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -6,
                            ActivityId = 12,
                            CredentialSetId = 6,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -22,
                            ActivityId = 1,
                            CredentialSetId = 14,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -22,
                            ActivityId = 7,
                            CredentialSetId = 14,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -22,
                            ActivityId = 24,
                            CredentialSetId = 14,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -22,
                            ActivityId = 1,
                            CredentialSetId = 141,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -22,
                            ActivityId = 7,
                            CredentialSetId = 141,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -22,
                            ActivityId = 7,
                            CredentialSetId = 142,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -1,
                            ActivityId = 1,
                            CredentialSetId = 1,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -1,
                            ActivityId = 2,
                            CredentialSetId = 1,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -1,
                            ActivityId = 3,
                            CredentialSetId = 1,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -1,
                            ActivityId = 6,
                            CredentialSetId = 1,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -1,
                            ActivityId = 7,
                            CredentialSetId = 1,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -1,
                            ActivityId = 9,
                            CredentialSetId = 1,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -1,
                            ActivityId = 10,
                            CredentialSetId = 1,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -1,
                            ActivityId = 11,
                            CredentialSetId = 1,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -1,
                            ActivityId = 12,
                            CredentialSetId = 1,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -31,
                            ActivityId = 1,
                            CredentialSetId = 31,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -31,
                            ActivityId = 2,
                            CredentialSetId = 31,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -31,
                            ActivityId = 11,
                            CredentialSetId = 31,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -31,
                            ActivityId = 1,
                            CredentialSetId = 317,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -31,
                            ActivityId = 2,
                            CredentialSetId = 317,
                            DisplayOrder = 0
                        },
                        new
                        {
                            GroupId = -31,
                            ActivityId = 11,
                            CredentialSetId = 317,
                            DisplayOrder = 0
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.Credential", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Credential","Group");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "IdentityVerifiedByYoti"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ManuallyVerified"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DBS Check"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sandbox - Befriender Training"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Policies & Procedures"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.CredentialSet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("CredentialId")
                        .HasColumnName("CredentialID")
                        .HasColumnType("int");

                    b.HasKey("Id", "GroupId", "CredentialId");

                    b.HasIndex("GroupId", "CredentialId");

                    b.ToTable("CredentialSet","Group");

                    b.HasData(
                        new
                        {
                            Id = 14,
                            GroupId = -22,
                            CredentialId = -1
                        },
                        new
                        {
                            Id = 7,
                            GroupId = -7,
                            CredentialId = -1
                        },
                        new
                        {
                            Id = 6,
                            GroupId = -6,
                            CredentialId = -1
                        },
                        new
                        {
                            Id = 1,
                            GroupId = -1,
                            CredentialId = -1
                        },
                        new
                        {
                            Id = 31,
                            GroupId = -31,
                            CredentialId = -1
                        },
                        new
                        {
                            Id = 71,
                            GroupId = -7,
                            CredentialId = 2
                        },
                        new
                        {
                            Id = 141,
                            GroupId = -22,
                            CredentialId = 2
                        },
                        new
                        {
                            Id = 7,
                            GroupId = -7,
                            CredentialId = 1
                        },
                        new
                        {
                            Id = 14,
                            GroupId = -22,
                            CredentialId = 1
                        },
                        new
                        {
                            Id = 31,
                            GroupId = -31,
                            CredentialId = 1
                        },
                        new
                        {
                            Id = 142,
                            GroupId = -22,
                            CredentialId = 3
                        },
                        new
                        {
                            Id = 317,
                            GroupId = -31,
                            CredentialId = 7
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumCommunicationJobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CommunicationJobType","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SendWelcomeMessage"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SendRegistrationChasers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SendNewTaskNotification"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SendOpenTaskDigest"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SendTaskStateChangeUpdate"
                        },
                        new
                        {
                            Id = 6,
                            Name = "PostYotiCommunication"
                        },
                        new
                        {
                            Id = 7,
                            Name = "SendTaskReminder"
                        },
                        new
                        {
                            Id = 8,
                            Name = "InterUserMessage"
                        },
                        new
                        {
                            Id = 9,
                            Name = "NewCredentials"
                        },
                        new
                        {
                            Id = 10,
                            Name = "NewTaskPendingApprovalNotification"
                        },
                        new
                        {
                            Id = 11,
                            Name = "RequestorTaskConfirmation"
                        },
                        new
                        {
                            Id = 12,
                            Name = "TaskDetail"
                        },
                        new
                        {
                            Id = 13,
                            Name = "SendNewRequestNotification"
                        },
                        new
                        {
                            Id = 14,
                            Name = "SendShiftReminder"
                        },
                        new
                        {
                            Id = 15,
                            Name = "GroupWelcome"
                        },
                        new
                        {
                            Id = 16,
                            Name = "NewUserNotification"
                        },
                        new
                        {
                            Id = 17,
                            Name = "InProgressReminder"
                        },
                        new
                        {
                            Id = 18,
                            Name = "JobsDueTomorrow"
                        },
                        new
                        {
                            Id = 19,
                            Name = "TaskAppliedForNotification"
                        },
                        new
                        {
                            Id = 20,
                            Name = "ImpendingUserDeletion"
                        },
                        new
                        {
                            Id = 21,
                            Name = "UserDeleted"
                        },
                        new
                        {
                            Id = 22,
                            Name = "RequestToHelpApproved"
                        },
                        new
                        {
                            Id = 23,
                            Name = "RequestToHelpDeclined"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumCredentialTypes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CredentialTypes","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IdentityVerification"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ThirdPartyCheck"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Training"
                        },
                        new
                        {
                            Id = 4,
                            Name = "References"
                        },
                        new
                        {
                            Id = 5,
                            Name = "PolicyAgreement"
                        },
                        new
                        {
                            Id = 6,
                            Name = "BankDetails"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumGroupType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupType","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Local"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Regional"
                        },
                        new
                        {
                            Id = 2,
                            Name = "National"
                        },
                        new
                        {
                            Id = 3,
                            Name = "HelpMyStreet"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location","Lookup");

                    b.HasData(
                        new
                        {
                            Id = -16,
                            Name = "RichmondMedicalCentre"
                        },
                        new
                        {
                            Id = -15,
                            Name = "ForestRecreationGround"
                        },
                        new
                        {
                            Id = -14,
                            Name = "KingsMeadowCampus"
                        },
                        new
                        {
                            Id = -13,
                            Name = "RichardHerrodCentre"
                        },
                        new
                        {
                            Id = -12,
                            Name = "GamstonCommunityHall"
                        },
                        new
                        {
                            Id = -11,
                            Name = "MansfieldWickesSite"
                        },
                        new
                        {
                            Id = -10,
                            Name = "PortlandMedicalPracticeLincoln"
                        },
                        new
                        {
                            Id = -9,
                            Name = "RustonsSportsAndSocialClubLincoln"
                        },
                        new
                        {
                            Id = -8,
                            Name = "SidingsMedicalPracticeBoston"
                        },
                        new
                        {
                            Id = -7,
                            Name = "FranklinHallSpilsby"
                        },
                        new
                        {
                            Id = -6,
                            Name = "StMarysMedicalPracticeStamford"
                        },
                        new
                        {
                            Id = -5,
                            Name = "WaddingtonBranchSurgerySouthLincoln"
                        },
                        new
                        {
                            Id = -4,
                            Name = "TableTennisClubGrantham"
                        },
                        new
                        {
                            Id = -3,
                            Name = "LouthCommunityHospital"
                        },
                        new
                        {
                            Id = -2,
                            Name = "PilgramHospitalBolton"
                        },
                        new
                        {
                            Id = -1,
                            Name = "LincolnCountyHospital"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumNewRequestNotificationStrategy", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NewRequestNotificationStrategy","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ClosestNEligibleVolunteers"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumRegistrationFormVariant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RegistrationFormVariant","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Default"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FaceMasks"
                        },
                        new
                        {
                            Id = 5,
                            Name = "AgeUKWirral"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Ruddington"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Southwell"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumRequestEvents", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestEvent","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ShowFullPostCode"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumRequestHelpFormVariant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestHelpFormVariant","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Default"
                        },
                        new
                        {
                            Id = 5,
                            Name = "FaceMasks"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ruddington"
                        },
                        new
                        {
                            Id = 8,
                            Name = "AgeUKWirral"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Sandbox_RequestSubmitter"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Soutwell_Public"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdmin = false,
                            Name = "Member"
                        },
                        new
                        {
                            Id = 2,
                            IsAdmin = true,
                            Name = "TaskAdmin"
                        },
                        new
                        {
                            Id = 3,
                            IsAdmin = true,
                            Name = "UserAdmin"
                        },
                        new
                        {
                            Id = 4,
                            IsAdmin = true,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 5,
                            IsAdmin = true,
                            Name = "RequestSubmitter"
                        },
                        new
                        {
                            Id = 6,
                            IsAdmin = false,
                            Name = "Volunteer"
                        },
                        new
                        {
                            Id = 7,
                            IsAdmin = true,
                            Name = "UserAdmin_ReadOnly"
                        },
                        new
                        {
                            Id = 8,
                            IsAdmin = true,
                            Name = "ShowCharts"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumSupportActivity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupportActivity","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FriendlyName = "Shopping",
                            Name = "Shopping"
                        },
                        new
                        {
                            Id = 2,
                            FriendlyName = "Prescriptions",
                            Name = "CollectingPrescriptions"
                        },
                        new
                        {
                            Id = 3,
                            FriendlyName = "Errands",
                            Name = "Errands"
                        },
                        new
                        {
                            Id = 4,
                            FriendlyName = "Medical Appointment Transport",
                            Name = "MedicalAppointmentTransport"
                        },
                        new
                        {
                            Id = 5,
                            FriendlyName = "Dog Walking",
                            Name = "DogWalking"
                        },
                        new
                        {
                            Id = 6,
                            FriendlyName = "Prepared Meal",
                            Name = "MealPreparation"
                        },
                        new
                        {
                            Id = 7,
                            FriendlyName = "Friendly Chat",
                            Name = "PhoneCalls_Friendly"
                        },
                        new
                        {
                            Id = 8,
                            FriendlyName = "Supportive Chat",
                            Name = "PhoneCalls_Anxious"
                        },
                        new
                        {
                            Id = 9,
                            FriendlyName = "Homework",
                            Name = "HomeworkSupport"
                        },
                        new
                        {
                            Id = 10,
                            FriendlyName = "Check In",
                            Name = "CheckingIn"
                        },
                        new
                        {
                            Id = 11,
                            FriendlyName = "Other",
                            Name = "Other"
                        },
                        new
                        {
                            Id = 12,
                            FriendlyName = "Face Covering",
                            Name = "FaceMask"
                        },
                        new
                        {
                            Id = 13,
                            FriendlyName = "Wellbeing Package",
                            Name = "WellbeingPackage"
                        },
                        new
                        {
                            Id = 14,
                            FriendlyName = "Community Connector",
                            Name = "CommunityConnector"
                        },
                        new
                        {
                            Id = 15,
                            FriendlyName = "Cold Weather Army",
                            Name = "ColdWeatherArmy"
                        },
                        new
                        {
                            Id = 16,
                            FriendlyName = "Transport",
                            Name = "Transport"
                        },
                        new
                        {
                            Id = 21,
                            FriendlyName = "Meals To Your Door",
                            Name = "MealsToYourDoor"
                        },
                        new
                        {
                            Id = 22,
                            FriendlyName = "Volunteer Support",
                            Name = "VolunteerSupport"
                        },
                        new
                        {
                            Id = 23,
                            FriendlyName = "Mealtime Companion",
                            Name = "MealtimeCompanion"
                        },
                        new
                        {
                            Id = 24,
                            FriendlyName = "Vaccine Support",
                            Name = "VaccineSupport"
                        },
                        new
                        {
                            Id = 25,
                            FriendlyName = "Emergency Support",
                            Name = "EmergencySupport"
                        },
                        new
                        {
                            Id = 26,
                            FriendlyName = "In-Person Befriending",
                            Name = "InPersonBefriending"
                        },
                        new
                        {
                            Id = 27,
                            FriendlyName = "Practical Support",
                            Name = "PracticalSupport"
                        },
                        new
                        {
                            Id = 28,
                            FriendlyName = "Volunteer Induction",
                            Name = "VolunteerInduction"
                        },
                        new
                        {
                            Id = 29,
                            FriendlyName = "Digital Support",
                            Name = "DigitalSupport"
                        },
                        new
                        {
                            Id = 30,
                            FriendlyName = "Bin Day Assistance",
                            Name = "BinDayAssistance"
                        },
                        new
                        {
                            Id = 31,
                            FriendlyName = "Covid 19 Help",
                            Name = "Covid19Help"
                        },
                        new
                        {
                            Id = 32,
                            FriendlyName = "Bank Staff Vaccinator",
                            Name = "BankStaffVaccinator"
                        },
                        new
                        {
                            Id = 33,
                            FriendlyName = "Skill Share",
                            Name = "SkillShare"
                        },
                        new
                        {
                            Id = 34,
                            FriendlyName = "Accommodation",
                            Name = "Accommodation"
                        },
                        new
                        {
                            Id = 35,
                            FriendlyName = "Roles",
                            Name = "AdvertisingRoles"
                        },
                        new
                        {
                            Id = 36,
                            FriendlyName = "NHS Steward",
                            Name = "NHSSteward"
                        },
                        new
                        {
                            Id = 37,
                            FriendlyName = "NHS Transport",
                            Name = "NHSTransport"
                        },
                        new
                        {
                            Id = 38,
                            FriendlyName = "NHS Check-In and Chat",
                            Name = "NHSCheckInAndChat"
                        },
                        new
                        {
                            Id = 39,
                            FriendlyName = "NHS Check-In and Chat (PLUS)",
                            Name = "NHSCheckInAndChatPlus"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumSupportActivityInstructions", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupportActivityInstructions","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HMS_Shopping"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HMS_OtherPurchase"
                        },
                        new
                        {
                            Id = 3,
                            Name = "HMS_General"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HMS_FriendlyChat"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HMS_Homework"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HMS_CheckIn"
                        },
                        new
                        {
                            Id = 7,
                            Name = "HMS_FaceCovering"
                        },
                        new
                        {
                            Id = 8,
                            Name = "FTLOS_FaceCovering"
                        },
                        new
                        {
                            Id = 9,
                            Name = "AgeUKLincoln_V4V"
                        },
                        new
                        {
                            Id = 10,
                            Name = "AgeUKWirral_Shopping"
                        },
                        new
                        {
                            Id = 11,
                            Name = "AgeUKWirral_Prescriptions"
                        },
                        new
                        {
                            Id = 12,
                            Name = "AgeUKWirral_General"
                        },
                        new
                        {
                            Id = 13,
                            Name = "AgeUKLSL_Shopping"
                        },
                        new
                        {
                            Id = 14,
                            Name = "AgeUKLSL_Prescriptions"
                        },
                        new
                        {
                            Id = 15,
                            Name = "AgeUKLSL_General"
                        },
                        new
                        {
                            Id = 16,
                            Name = "AgeUKSKC_MealtimeCompanion"
                        },
                        new
                        {
                            Id = 17,
                            Name = "AgeUKSKC_MealsToYourDoor"
                        },
                        new
                        {
                            Id = 18,
                            Name = "HMS_VolunteerSupport"
                        },
                        new
                        {
                            Id = 19,
                            Name = "AgeUKSKC_Other"
                        },
                        new
                        {
                            Id = 20,
                            Name = "AgeUKSKC_Prescriptions"
                        },
                        new
                        {
                            Id = 21,
                            Name = "AgeUKSKC_Shopping"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Lincoln_VaccineSupport"
                        },
                        new
                        {
                            Id = 23,
                            Name = "AgeUKNWK_MealsToYourDoor"
                        },
                        new
                        {
                            Id = 24,
                            Name = "AgeUKNWK_Other"
                        },
                        new
                        {
                            Id = 25,
                            Name = "AgeUKNWK_Prescriptions"
                        },
                        new
                        {
                            Id = 26,
                            Name = "AgeUKNWK_Shopping"
                        },
                        new
                        {
                            Id = 27,
                            Name = "AgeUKFANDS_FriendlyChat"
                        },
                        new
                        {
                            Id = 28,
                            Name = "AgeUKFANDS_MealsToYourDoor"
                        },
                        new
                        {
                            Id = 29,
                            Name = "AgeUKFANDS_MealtimeCompanion"
                        },
                        new
                        {
                            Id = 30,
                            Name = "AgeUKFANDS_Transport"
                        },
                        new
                        {
                            Id = 31,
                            Name = "AgeUKFANDS_VolunteerSupport"
                        },
                        new
                        {
                            Id = 32,
                            Name = "AgeUKFANDS_Other"
                        },
                        new
                        {
                            Id = 33,
                            Name = "HMS_EmergencySupport"
                        },
                        new
                        {
                            Id = 34,
                            Name = "AgeConnectCardiff_VolunteerSupport"
                        },
                        new
                        {
                            Id = 35,
                            Name = "AgeConnectCardiff_PracticalSupport"
                        },
                        new
                        {
                            Id = 36,
                            Name = "AgeConnectCardiff_InPersonBefriending"
                        },
                        new
                        {
                            Id = 37,
                            Name = "AgeConnectCardiff_Other"
                        },
                        new
                        {
                            Id = 38,
                            Name = "AgeConnectCardiff_Transport"
                        },
                        new
                        {
                            Id = 39,
                            Name = "AgeConnectCardiff_VolunteerInduction"
                        },
                        new
                        {
                            Id = 40,
                            Name = "HMS_BinDayAssistance"
                        },
                        new
                        {
                            Id = 41,
                            Name = "AgeUKWirral_VolunteerSupport"
                        },
                        new
                        {
                            Id = 42,
                            Name = "AgeConnectCardiff_Shopping"
                        },
                        new
                        {
                            Id = 43,
                            Name = "AgeConnectCardiff_FriendlyChat"
                        },
                        new
                        {
                            Id = 44,
                            Name = "AgeConnectCardiff_Prescriptions"
                        },
                        new
                        {
                            Id = 45,
                            Name = "AgeUKNottsBalderton_Shopping"
                        },
                        new
                        {
                            Id = 46,
                            Name = "AgeUKNottsBalderton_Prescriptions"
                        },
                        new
                        {
                            Id = 47,
                            Name = "AgeUKNottsBalderton_FriendlyChat"
                        },
                        new
                        {
                            Id = 48,
                            Name = "AgeUKNottsBalderton_DogWalking"
                        },
                        new
                        {
                            Id = 49,
                            Name = "AgeUKNottsNorthMuskham_Shopping"
                        },
                        new
                        {
                            Id = 50,
                            Name = "AgeUKNottsNorthMuskham_Prescriptions"
                        },
                        new
                        {
                            Id = 51,
                            Name = "AgeUKNottsNorthMuskham_FriendlyChat"
                        },
                        new
                        {
                            Id = 52,
                            Name = "AgeUKNottsNorthMuskham_DogWalking"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Lincoln_Stamford_VaccineSupport"
                        },
                        new
                        {
                            Id = 54,
                            Name = "MansfieldCVS_VaccineSupport"
                        },
                        new
                        {
                            Id = 55,
                            Name = "EastLindsey_VaccineSupport"
                        },
                        new
                        {
                            Id = 56,
                            Name = "APEXBank_BankStaffVaccinator"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Southwell_Prescriptions"
                        },
                        new
                        {
                            Id = 58,
                            Name = "AgeUKMidMersey_Befriending"
                        },
                        new
                        {
                            Id = 59,
                            Name = "AgeUKMidMersey_SkillShare"
                        },
                        new
                        {
                            Id = 60,
                            Name = "APH_BreakfastVisit"
                        },
                        new
                        {
                            Id = 61,
                            Name = "APH_LunchVisit"
                        },
                        new
                        {
                            Id = 62,
                            Name = "APH_MedicationCheckIn"
                        },
                        new
                        {
                            Id = 63,
                            Name = "APH_WellBeingVisit"
                        },
                        new
                        {
                            Id = 64,
                            Name = "UKRANIAN_Accommodation"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Lincolnshire_AdvertisingRoles"
                        },
                        new
                        {
                            Id = 66,
                            Name = "NHSDemo_Transport"
                        },
                        new
                        {
                            Id = 67,
                            Name = "NHSDemo_Steward"
                        },
                        new
                        {
                            Id = 68,
                            Name = "NHSDemo_CheckInAndChat"
                        },
                        new
                        {
                            Id = 69,
                            Name = "NHSDemo_CheckInAndChatPlus"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.EnumTargetGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TargetGroup","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "ThisGroup"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ThisGroupAndChildren"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ParentGroup"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SiblingsAndParentGroup"
                        },
                        new
                        {
                            Id = 4,
                            Name = "GenericGroup"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ThisGroupAndGenericGroup"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeographicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte>("GroupType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HomepageEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("JoinGroupPopUpDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("ShiftsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TasksEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GroupKey")
                        .IsUnique()
                        .HasName("UC_GroupKey")
                        .HasFilter("[GroupKey] IS NOT NULL");

                    b.HasIndex("GroupName")
                        .IsUnique()
                        .HasName("UC_GroupName");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("Group","Group");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            GroupKey = "Generic",
                            GroupName = "HelpMyStreet",
                            GroupType = (byte)3,
                            HomepageEnabled = false,
                            ShiftsEnabled = false,
                            ShortName = "HelpMyStreet",
                            TasksEnabled = true
                        },
                        new
                        {
                            Id = -6,
                            FriendlyName = "Ruddington Community Response Team",
                            GeographicName = "Ruddington",
                            GroupKey = "ruddington",
                            GroupName = "Ruddington",
                            GroupType = (byte)0,
                            HomepageEnabled = true,
                            LinkURL = "/ruddington",
                            ShiftsEnabled = false,
                            ShortName = "Ruddington",
                            TasksEnabled = true
                        },
                        new
                        {
                            Id = -7,
                            FriendlyName = "Age UK Wirral",
                            GroupKey = "ageukwirral",
                            GroupName = "Age UK Wirral",
                            GroupType = (byte)0,
                            HomepageEnabled = true,
                            LinkURL = "/ageukwirral",
                            ShiftsEnabled = false,
                            ShortName = "Wirral",
                            TasksEnabled = true
                        },
                        new
                        {
                            Id = -22,
                            GroupKey = "hms-sandbox",
                            GroupName = "Sandbox",
                            GroupType = (byte)2,
                            HomepageEnabled = false,
                            ShiftsEnabled = true,
                            TasksEnabled = true
                        },
                        new
                        {
                            Id = -31,
                            FriendlyName = "Southwell Torpedos",
                            GeographicName = "Southwell or surrounding areas",
                            GroupKey = "southwell",
                            GroupName = "Southwell Torpedos",
                            GroupType = (byte)0,
                            HomepageEnabled = true,
                            LinkURL = "/southwell",
                            ShiftsEnabled = false,
                            ShortName = "Southwell",
                            TasksEnabled = true
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupCredential", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("CredentialId")
                        .HasColumnName("CredentialID")
                        .HasColumnType("int");

                    b.Property<byte>("CredentialTypeId")
                        .HasColumnName("CredentialTypeID")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CredentialVerifiedById")
                        .HasColumnType("tinyint");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("HowToAchieve")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("HowToAchieve_CTA_Destination")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("WhatIsThis")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("GroupId", "CredentialId")
                        .HasName("PK_GROUP_CREDENTIAL");

                    b.HasIndex("CredentialId");

                    b.ToTable("GroupCredential","Group");

                    b.HasData(
                        new
                        {
                            GroupId = -22,
                            CredentialId = -1,
                            CredentialTypeId = (byte)1,
                            CredentialVerifiedById = (byte)1,
                            DisplayOrder = 1,
                            HowToAchieve = "Complete online",
                            HowToAchieve_CTA_Destination = "/account?next=verify",
                            Name = "Yoti ID Verification",
                            WhatIsThis = "Yoti is our trusted digital identity verification provider. Volunteers can follow the instructions in their profile to get verified. Volunteer admins cannot edit this credential."
                        },
                        new
                        {
                            GroupId = -7,
                            CredentialId = -1,
                            CredentialTypeId = (byte)1,
                            CredentialVerifiedById = (byte)1,
                            DisplayOrder = 1,
                            HowToAchieve = "Complete online",
                            HowToAchieve_CTA_Destination = "/account?next=verify",
                            Name = "Yoti ID Verification",
                            WhatIsThis = "Yoti is our trusted digital identity verification provider. Volunteers can follow the instructions in their profile to get verified. Volunteer admins cannot edit this credential."
                        },
                        new
                        {
                            GroupId = -6,
                            CredentialId = -1,
                            CredentialTypeId = (byte)1,
                            CredentialVerifiedById = (byte)1,
                            DisplayOrder = 1,
                            HowToAchieve = "Complete online",
                            HowToAchieve_CTA_Destination = "/account?next=verify",
                            Name = "Yoti ID Verification",
                            WhatIsThis = "Yoti is our trusted digital identity verification provider. Volunteers can follow the instructions in their profile to get verified. Volunteer admins cannot edit this credential."
                        },
                        new
                        {
                            GroupId = -1,
                            CredentialId = -1,
                            CredentialTypeId = (byte)1,
                            CredentialVerifiedById = (byte)1,
                            DisplayOrder = 1,
                            HowToAchieve = "Complete online",
                            HowToAchieve_CTA_Destination = "/account?next=verify",
                            Name = "Yoti ID Verification",
                            WhatIsThis = "Yoti is our trusted digital identity verification provider. Volunteers can follow the instructions in their profile to get verified. Volunteer admins cannot edit this credential."
                        },
                        new
                        {
                            GroupId = -31,
                            CredentialId = -1,
                            CredentialTypeId = (byte)1,
                            CredentialVerifiedById = (byte)1,
                            DisplayOrder = 1,
                            HowToAchieve = "Complete online",
                            HowToAchieve_CTA_Destination = "/account?next=verify",
                            Name = "Yoti ID Verification",
                            WhatIsThis = "Yoti is our trusted digital identity verification provider. Volunteers can follow the instructions in their profile to get verified. Volunteer admins cannot edit this credential."
                        },
                        new
                        {
                            GroupId = -7,
                            CredentialId = 2,
                            CredentialTypeId = (byte)2,
                            CredentialVerifiedById = (byte)2,
                            DisplayOrder = 3,
                            HowToAchieve = "Email Age UK Wirral to request or register your DBS check at mailto:volunteers@ageukwirral.org.uk",
                            HowToAchieve_CTA_Destination = "",
                            Name = "DBS Check",
                            WhatIsThis = "Use this credential to record a completed DBS (Disclosure and Barring Service) check. Volunteer admins should follow internal processes for logging a DBS check."
                        },
                        new
                        {
                            GroupId = -7,
                            CredentialId = 1,
                            CredentialTypeId = (byte)1,
                            CredentialVerifiedById = (byte)2,
                            DisplayOrder = 2,
                            HowToAchieve = "If you’re unable to verify with Yoti, email Age UK Wirral to find out how they can check your ID at mailto:volunteers@ageukwirral.org.uk",
                            HowToAchieve_CTA_Destination = "",
                            Name = "Manual ID Verification",
                            WhatIsThis = "Use this credential to certify that you have verified a volunteer’s identity and are satisfied they are who they claim to be. Volunteer admins should follow internal processes for manually verifying a volunteer’s identity."
                        },
                        new
                        {
                            GroupId = -22,
                            CredentialId = 1,
                            CredentialTypeId = (byte)1,
                            CredentialVerifiedById = (byte)2,
                            DisplayOrder = 2,
                            HowToAchieve = "If you’re unable to verify with Yoti, email your group admins to find out how they can check your ID",
                            HowToAchieve_CTA_Destination = "",
                            Name = "Manual ID Verification",
                            WhatIsThis = "Use this credential to certify that you have verified a volunteer’s identity and are satisfied they are who they claim to be. Volunteer admins should follow internal processes for manually verifying a volunteer’s identity."
                        },
                        new
                        {
                            GroupId = -22,
                            CredentialId = 2,
                            CredentialTypeId = (byte)2,
                            CredentialVerifiedById = (byte)2,
                            DisplayOrder = 3,
                            HowToAchieve = "Email your group admins to request or register your DBS check",
                            HowToAchieve_CTA_Destination = "",
                            Name = "DBS Check",
                            WhatIsThis = "Use this credential to record a completed DBS (Disclosure and Barring Service) check. Volunteer admins should follow internal processes for logging a DBS check."
                        },
                        new
                        {
                            GroupId = -22,
                            CredentialId = 3,
                            CredentialTypeId = (byte)3,
                            CredentialVerifiedById = (byte)2,
                            DisplayOrder = 4,
                            HowToAchieve = "Email your group admins to book onto the next course",
                            HowToAchieve_CTA_Destination = "",
                            Name = "Befriender Training",
                            WhatIsThis = "Use this credential to record that a volunteer has completed the Befriender traning course."
                        },
                        new
                        {
                            GroupId = -31,
                            CredentialId = 1,
                            CredentialTypeId = (byte)1,
                            CredentialVerifiedById = (byte)2,
                            DisplayOrder = 2,
                            HowToAchieve = "If you’re unable to verify with Yoti, please email mailto:jacky.huson@btinternet.com to request a manual ID check. You will also need to join our group from our <a href=\"/southwell\">HelpMyStreet landing page</a> if you haven’t already.",
                            HowToAchieve_CTA_Destination = "",
                            Name = "Manual ID Verification",
                            WhatIsThis = "Use this credential to certify that you have verified a volunteer’s identity and are satisfied they are who they claim to be. Volunteer admins should follow internal processes for manually verifying a volunteer’s identity."
                        },
                        new
                        {
                            GroupId = -31,
                            CredentialId = 7,
                            CredentialTypeId = (byte)5,
                            CredentialVerifiedById = (byte)2,
                            DisplayOrder = 3,
                            HowToAchieve = "In order to reassure the individuals we support please read and consent to our volunteer agreement found <a href=\"https://www.thetorpedos.org/publicdocuments\">here</a>. If you consent email mailto:info@thetorpedos.org and we will update your profile.",
                            HowToAchieve_CTA_Destination = "",
                            Name = "Volunteer Agreement",
                            WhatIsThis = "Use this credential to certify that a volunteer has accepted the Southwell Torpedos Volunteer Agreement. Volunteer admins should follow internal processes for manually verifying this credential."
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupEmailConfiguration", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GroupID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CommunicationJobTypeId")
                        .HasColumnName("CommunicationJobTypeID")
                        .HasColumnType("tinyint");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId", "CommunicationJobTypeId");

                    b.ToTable("GroupEmailConfiguration","Group");

                    b.HasData(
                        new
                        {
                            GroupId = -1,
                            CommunicationJobTypeId = (byte)15,
                            Configuration = "[{\"Key\":\"GroupContent\",\"Value\":\"<p>HelpMyStreet has partnered with organisations across the country to help make volunteering easier. To find out who we’re working with go to <a href=\\\"www.helpmystreet.org\\\">www.helpmystreet.org</a> and search our interactive map.</p><p>Most requests will need you to verify your ID before you start helping -  this is to make things as safe as possible for everyone using our site.</p>\"},{\"Key\":\"GroupSignature\",\"Value\":\"\"},{\"Key\":\"GroupPS\",\"Value\":\"\"}]"
                        },
                        new
                        {
                            GroupId = -6,
                            CommunicationJobTypeId = (byte)15,
                            Configuration = "[{\"Key\":\"GroupContent\",\"Value\":\"Before you start volunteering with us we need to verify your ID – this is to make things as safe as possible for you and the people we help.\"},{\"Key\":\"GroupSignature\",\"Value\":\"Best wishes,</p><p>Ruddington Community Response Team\"},{\"Key\":\"GroupPS\",\"Value\":\"Questions? Drop us an email at <a href=\\\"mailto:ruddington@helpmystreet.org\\\">ruddington@helpmystreet.org</a>.\"}]"
                        },
                        new
                        {
                            GroupId = -7,
                            CommunicationJobTypeId = (byte)15,
                            Configuration = "[{\"Key\":\"GroupContent\",\"Value\":\"<p>Before you start volunteering with us we need to do a couple of checks. You will need to verify your ID - which you can do in just a couple of minutes online - and register a DBS check with us. If you’re having trouble verifying your ID or need to register a DBS check email <a href=\\\"mailto:volunteers@ageukwirral.org.uk\\\">volunteers@ageukwirral.org.uk</a>.</p>\"},{\"Key\":\"GroupSignature\",\"Value\":\"Best wishes,</p><p>Age UK Wirral\"},{\"Key\":\"GroupPS\",\"Value\":\"Questions? Drop us an email at <a href=\\\"mailto:volunteers@ageukwirral.org.uk\\\">volunteers@ageukwirral.org.uk</a>.\"},{\"Key\":\"ShowGroupLogo\",\"Value\":\"true\"}]"
                        },
                        new
                        {
                            GroupId = -22,
                            CommunicationJobTypeId = (byte)15,
                            Configuration = "[{\"Key\":\"GroupContent\",\"Value\":\"<p>Before you start volunteering with us we need to verify your ID – this is to make things as safe as possible for you and the people we help.</p><p>For some roles, we may also require additional checks or training – we will let you know if any additional checks are needed before you accept a request.</p>\"},{\"Key\":\"GroupSignature\",\"Value\":\"\"},{\"Key\":\"GroupPS\",\"Value\":\"Questions? Drop us an email at <a href=\\\"mailto:contact@helpmystreet.org\\\">contact@helpmystreet.org</a>.\"},{\"Key\":\"ShowGroupLogo\",\"Value\":\"true\"}]"
                        },
                        new
                        {
                            GroupId = -31,
                            CommunicationJobTypeId = (byte)15,
                            Configuration = "[{\"Key\":\"GroupContent\",\"Value\":\"<p>Before you start volunteering with us we need to verify your ID and ensure you consent to our volunteer agreement – this is to make things as safe as possible for you and the people we help.</p><p>Please read the public documents found on our website (<a href=\\\"https://www.thetorpedos.org/publicdocuments\\\">here</a>) and drop us an email at <a href=\\\"mailto:info@thetorpedos.org\\\">info@thetorpedos.org</a> to confirm you’ve read and agree to our policies and volunteer agreement.</p>\"},{\"Key\":\"GroupSignature\",\"Value\":\"Best wishes,</p><p>Southwell Torpedos\"},{\"Key\":\"GroupPS\",\"Value\":\"Questions? Drop us an email at <a href=\\\"mailto:info@thetorpedos.org\\\">info@thetorpedos.org</a>.\"},{\"Key\":\"ShowGroupLogo\",\"Value\":\"true\"}]"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupLocation", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "LocationId")
                        .HasName("PK_GROUP_LOCATION");

                    b.ToTable("GroupLocation","Group");

                    b.HasData(
                        new
                        {
                            GroupId = -1,
                            LocationId = -9
                        },
                        new
                        {
                            GroupId = -1,
                            LocationId = -6
                        },
                        new
                        {
                            GroupId = -1,
                            LocationId = -3
                        },
                        new
                        {
                            GroupId = -1,
                            LocationId = -16
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupMapDetails", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<byte>("MapLocationId")
                        .HasColumnName("MapLocationID")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("ZoomLevel")
                        .HasColumnType("decimal(9, 6)");

                    b.HasKey("GroupId", "MapLocationId")
                        .HasName("PK_GROUP_GROUP_MAP_DETAILS");

                    b.ToTable("GroupMapDetails","Group");

                    b.HasData(
                        new
                        {
                            GroupId = -6,
                            MapLocationId = (byte)0,
                            Latitude = 52.8925m,
                            Longitude = -1.150m,
                            ZoomLevel = 14.6m
                        },
                        new
                        {
                            GroupId = -6,
                            MapLocationId = (byte)1,
                            Latitude = 52.8925m,
                            Longitude = -1.150m,
                            ZoomLevel = 14.6m
                        },
                        new
                        {
                            GroupId = -7,
                            MapLocationId = (byte)1,
                            Latitude = 53.37m,
                            Longitude = -3.05m,
                            ZoomLevel = 9m
                        },
                        new
                        {
                            GroupId = -7,
                            MapLocationId = (byte)0,
                            Latitude = 53.37m,
                            Longitude = -3.05m,
                            ZoomLevel = 11.15m
                        },
                        new
                        {
                            GroupId = -31,
                            MapLocationId = (byte)0,
                            Latitude = 53.0779128m,
                            Longitude = -0.973649m,
                            ZoomLevel = 13.5m
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupNewRequestNotificationStrategy", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("MaxVolunteer")
                        .HasColumnType("int");

                    b.Property<byte>("NewRequestNotificationStrategyId")
                        .HasColumnType("tinyint");

                    b.HasKey("GroupId");

                    b.ToTable("NewRequestNotificationStrategy","Group");

                    b.HasData(
                        new
                        {
                            GroupId = -6,
                            MaxVolunteer = 2147483647,
                            NewRequestNotificationStrategyId = (byte)1
                        },
                        new
                        {
                            GroupId = -7,
                            MaxVolunteer = 2147483647,
                            NewRequestNotificationStrategyId = (byte)1
                        },
                        new
                        {
                            GroupId = -1,
                            MaxVolunteer = 100,
                            NewRequestNotificationStrategyId = (byte)1
                        },
                        new
                        {
                            GroupId = -22,
                            MaxVolunteer = 2147483647,
                            NewRequestNotificationStrategyId = (byte)1
                        },
                        new
                        {
                            GroupId = -31,
                            MaxVolunteer = 2147483647,
                            NewRequestNotificationStrategyId = (byte)1
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupSupportActivityConfiguration", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GroupID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SupportActivityId")
                        .HasColumnName("SupportActivityID")
                        .HasColumnType("int");

                    b.Property<double>("Radius")
                        .HasColumnType("float");

                    b.Property<short>("SupportActivityInstructionsId")
                        .HasColumnName("SupportActivityInstructionsID")
                        .HasColumnType("smallint");

                    b.HasKey("GroupId", "SupportActivityId");

                    b.HasIndex("SupportActivityInstructionsId");

                    b.ToTable("GroupSupportActivityConfiguration","Group");

                    b.HasData(
                        new
                        {
                            GroupId = -1,
                            SupportActivityId = 10,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)6
                        },
                        new
                        {
                            GroupId = -1,
                            SupportActivityId = 2,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)2
                        },
                        new
                        {
                            GroupId = -1,
                            SupportActivityId = 3,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)2
                        },
                        new
                        {
                            GroupId = -1,
                            SupportActivityId = 12,
                            Radius = 2000.0,
                            SupportActivityInstructionsId = (short)7
                        },
                        new
                        {
                            GroupId = -1,
                            SupportActivityId = 9,
                            Radius = 2000.0,
                            SupportActivityInstructionsId = (short)5
                        },
                        new
                        {
                            GroupId = -1,
                            SupportActivityId = 6,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)3
                        },
                        new
                        {
                            GroupId = -1,
                            SupportActivityId = 11,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)2
                        },
                        new
                        {
                            GroupId = -1,
                            SupportActivityId = 7,
                            Radius = 2000.0,
                            SupportActivityInstructionsId = (short)4
                        },
                        new
                        {
                            GroupId = -1,
                            SupportActivityId = 1,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)1
                        },
                        new
                        {
                            GroupId = -7,
                            SupportActivityId = 15,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)12
                        },
                        new
                        {
                            GroupId = -7,
                            SupportActivityId = 2,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)11
                        },
                        new
                        {
                            GroupId = -7,
                            SupportActivityId = 11,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)12
                        },
                        new
                        {
                            GroupId = -7,
                            SupportActivityId = 1,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)10
                        },
                        new
                        {
                            GroupId = -7,
                            SupportActivityId = 22,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)41
                        },
                        new
                        {
                            GroupId = -6,
                            SupportActivityId = 10,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)6
                        },
                        new
                        {
                            GroupId = -6,
                            SupportActivityId = 2,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)2
                        },
                        new
                        {
                            GroupId = -6,
                            SupportActivityId = 5,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)3
                        },
                        new
                        {
                            GroupId = -6,
                            SupportActivityId = 3,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)2
                        },
                        new
                        {
                            GroupId = -6,
                            SupportActivityId = 12,
                            Radius = 2000.0,
                            SupportActivityInstructionsId = (short)7
                        },
                        new
                        {
                            GroupId = -6,
                            SupportActivityId = 6,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)3
                        },
                        new
                        {
                            GroupId = -6,
                            SupportActivityId = 11,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)2
                        },
                        new
                        {
                            GroupId = -6,
                            SupportActivityId = 7,
                            Radius = 2000.0,
                            SupportActivityInstructionsId = (short)4
                        },
                        new
                        {
                            GroupId = -6,
                            SupportActivityId = 1,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)1
                        },
                        new
                        {
                            GroupId = -6,
                            SupportActivityId = 22,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)18
                        },
                        new
                        {
                            GroupId = -22,
                            SupportActivityId = 2,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)2
                        },
                        new
                        {
                            GroupId = -22,
                            SupportActivityId = 25,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)33
                        },
                        new
                        {
                            GroupId = -22,
                            SupportActivityId = 3,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)2
                        },
                        new
                        {
                            GroupId = -22,
                            SupportActivityId = 11,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)2
                        },
                        new
                        {
                            GroupId = -22,
                            SupportActivityId = 7,
                            Radius = 2000.0,
                            SupportActivityInstructionsId = (short)4
                        },
                        new
                        {
                            GroupId = -22,
                            SupportActivityId = 1,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)1
                        },
                        new
                        {
                            GroupId = -22,
                            SupportActivityId = 24,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)22
                        },
                        new
                        {
                            GroupId = -22,
                            SupportActivityId = 22,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)18
                        },
                        new
                        {
                            GroupId = -31,
                            SupportActivityId = 1,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)1
                        },
                        new
                        {
                            GroupId = -31,
                            SupportActivityId = 2,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)57
                        },
                        new
                        {
                            GroupId = -31,
                            SupportActivityId = 11,
                            Radius = 20.0,
                            SupportActivityInstructionsId = (short)2
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.RegistrationFormSupportActivity", b =>
                {
                    b.Property<byte>("RequestHelpFormVariantId")
                        .HasColumnName("RequestHelpFormVariantID")
                        .HasColumnType("tinyint");

                    b.Property<int>("SupportActivityId")
                        .HasColumnName("SupportActivityID")
                        .HasColumnType("int");

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("RequestHelpFormVariantId", "SupportActivityId");

                    b.ToTable("RegistrationFormSupportActivity","Website");

                    b.HasData(
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 1,
                            DisplayOrder = (byte)1,
                            IsPreSelected = false,
                            Label = "Picking up groceries and other essentials (e.g. food, toiletries, household products etc.)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 12,
                            DisplayOrder = (byte)2,
                            IsPreSelected = false,
                            Label = "Supplying homemade face coverings"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 2,
                            DisplayOrder = (byte)3,
                            IsPreSelected = false,
                            Label = "Collecting prescriptions from a local pharmacy"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 3,
                            DisplayOrder = (byte)4,
                            IsPreSelected = false,
                            Label = "Running essential local errands (e.g. posting mail)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 13,
                            DisplayOrder = (byte)5,
                            IsPreSelected = false,
                            Label = "Collecting and delivering a pre-prepared wellbeing package"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 5,
                            DisplayOrder = (byte)6,
                            IsPreSelected = false,
                            Label = "Walking the dog"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 6,
                            DisplayOrder = (byte)7,
                            IsPreSelected = false,
                            Label = "Preparing and/or delivering a hot / pre-prepared meal"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 7,
                            DisplayOrder = (byte)8,
                            IsPreSelected = false,
                            Label = "Calling someone in need of a friendly chat"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 8,
                            DisplayOrder = (byte)9,
                            IsPreSelected = false,
                            Label = "Providing support over the phone to someone who may be anxious (relevant experience required e.g. mental health first-aider)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 9,
                            DisplayOrder = (byte)10,
                            IsPreSelected = false,
                            Label = "Providing remote support for parents and carers home-schooling their children"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 10,
                            DisplayOrder = (byte)11,
                            IsPreSelected = false,
                            Label = "Reaching out to people in my area to check-in"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)0,
                            SupportActivityId = 11,
                            DisplayOrder = (byte)12,
                            IsPreSelected = false,
                            Label = "I may be able to help with other tasks, so please check with me."
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)5,
                            SupportActivityId = 1,
                            DisplayOrder = (byte)1,
                            IsPreSelected = false,
                            Label = "Picking up groceries and other essentials (e.g. food, toiletries, household products etc.)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)5,
                            SupportActivityId = 2,
                            DisplayOrder = (byte)2,
                            IsPreSelected = false,
                            Label = "Collecting prescriptions from a local pharmacy"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)5,
                            SupportActivityId = 15,
                            DisplayOrder = (byte)3,
                            IsPreSelected = false,
                            Label = "Providing help in emergency situations during a cold snap"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)5,
                            SupportActivityId = 16,
                            DisplayOrder = (byte)4,
                            IsPreSelected = false,
                            Label = "Providing transport for essential appointments"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)5,
                            SupportActivityId = 3,
                            DisplayOrder = (byte)5,
                            IsPreSelected = false,
                            Label = "Running essential local errands (e.g. posting mail)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)5,
                            SupportActivityId = 5,
                            DisplayOrder = (byte)6,
                            IsPreSelected = false,
                            Label = "Walking the dog"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)5,
                            SupportActivityId = 7,
                            DisplayOrder = (byte)7,
                            IsPreSelected = false,
                            Label = "Calling someone in need of a friendly chat"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)5,
                            SupportActivityId = 8,
                            DisplayOrder = (byte)8,
                            IsPreSelected = false,
                            Label = "Providing support over the phone to someone who may be anxious (relevant experience required e.g. mental health first-aider)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)5,
                            SupportActivityId = 11,
                            DisplayOrder = (byte)9,
                            IsPreSelected = false,
                            Label = "I may be able to help with other tasks, so please check with me."
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 1,
                            DisplayOrder = (byte)1,
                            IsPreSelected = true,
                            Label = "Picking up groceries and other essentials (e.g. food, toiletries, household products etc.)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 12,
                            DisplayOrder = (byte)2,
                            IsPreSelected = false,
                            Label = "Supplying homemade face coverings"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 2,
                            DisplayOrder = (byte)3,
                            IsPreSelected = false,
                            Label = "Collecting prescriptions from a local pharmacy"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 3,
                            DisplayOrder = (byte)4,
                            IsPreSelected = false,
                            Label = "Running essential local errands (e.g. posting mail)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 13,
                            DisplayOrder = (byte)5,
                            IsPreSelected = false,
                            Label = "Collecting and delivering a pre-prepared wellbeing package"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 5,
                            DisplayOrder = (byte)6,
                            IsPreSelected = false,
                            Label = "Walking the dog"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 6,
                            DisplayOrder = (byte)7,
                            IsPreSelected = false,
                            Label = "Preparing and/or delivering a hot / pre-prepared meal"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 7,
                            DisplayOrder = (byte)8,
                            IsPreSelected = false,
                            Label = "Calling someone in need of a friendly chat"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 8,
                            DisplayOrder = (byte)9,
                            IsPreSelected = false,
                            Label = "Providing support over the phone to someone who may be anxious (relevant experience required e.g. mental health first-aider)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 9,
                            DisplayOrder = (byte)10,
                            IsPreSelected = false,
                            Label = "Providing remote support for parents and carers home-schooling their children"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 10,
                            DisplayOrder = (byte)11,
                            IsPreSelected = false,
                            Label = "Reaching out to people in my area to check-in"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 22,
                            DisplayOrder = (byte)12,
                            IsPreSelected = false,
                            Label = "Helping with events, admin duties or not-for-profit activities"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)11,
                            SupportActivityId = 11,
                            DisplayOrder = (byte)13,
                            IsPreSelected = false,
                            Label = "I may be able to help with other tasks, so please check with me."
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)15,
                            SupportActivityId = 1,
                            DisplayOrder = (byte)1,
                            IsPreSelected = false,
                            Label = "Picking up groceries and other essentials (e.g. food, toiletries, household products etc.)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)15,
                            SupportActivityId = 2,
                            DisplayOrder = (byte)2,
                            IsPreSelected = false,
                            Label = "Collecting prescriptions from a local pharmacy"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)15,
                            SupportActivityId = 3,
                            DisplayOrder = (byte)3,
                            IsPreSelected = false,
                            Label = "Running essential local errands (e.g. posting mail)"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)15,
                            SupportActivityId = 30,
                            DisplayOrder = (byte)4,
                            IsPreSelected = false,
                            Label = "Taking out the bins on bin day"
                        },
                        new
                        {
                            RequestHelpFormVariantId = (byte)15,
                            SupportActivityId = 11,
                            DisplayOrder = (byte)5,
                            IsPreSelected = false,
                            Label = "I may be able to help with other tasks, so please check with me."
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.RegistrationJourney", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte>("RegistrationFormVariant")
                        .HasColumnName("RegistrationFormVariant")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TargetGroups")
                        .HasColumnName("TargetGroups")
                        .HasColumnType("tinyint");

                    b.HasKey("GroupId", "Source");

                    b.ToTable("RegistrationJourney","Website");

                    b.HasData(
                        new
                        {
                            GroupId = -1,
                            Source = "",
                            RegistrationFormVariant = (byte)0,
                            TargetGroups = (byte)5
                        },
                        new
                        {
                            GroupId = -1,
                            Source = "face-masks",
                            RegistrationFormVariant = (byte)4,
                            TargetGroups = (byte)5
                        },
                        new
                        {
                            GroupId = -6,
                            Source = "",
                            RegistrationFormVariant = (byte)11,
                            TargetGroups = (byte)5
                        },
                        new
                        {
                            GroupId = -7,
                            Source = "",
                            RegistrationFormVariant = (byte)5,
                            TargetGroups = (byte)5
                        },
                        new
                        {
                            GroupId = -31,
                            Source = "",
                            RegistrationFormVariant = (byte)15,
                            TargetGroups = (byte)5
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.RequestHelpJourney", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("AccessRestrictedByRole")
                        .HasColumnType("bit");

                    b.Property<byte>("RequestHelpFormVariant")
                        .HasColumnName("RequestHelpFormVariant")
                        .HasColumnType("tinyint");

                    b.Property<bool>("RequestorDefinedByGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestsRequireApproval")
                        .HasColumnType("bit");

                    b.Property<bool?>("SuppressRecipientPersonalDetails")
                        .HasColumnType("bit");

                    b.Property<byte>("TargetGroups")
                        .HasColumnName("TargetGroups")
                        .HasColumnType("tinyint");

                    b.HasKey("GroupId", "Source");

                    b.ToTable("RequestHelpJourney","Website");

                    b.HasData(
                        new
                        {
                            GroupId = -1,
                            Source = "",
                            AccessRestrictedByRole = false,
                            RequestHelpFormVariant = (byte)1,
                            RequestorDefinedByGroup = false,
                            RequestsRequireApproval = false,
                            SuppressRecipientPersonalDetails = false,
                            TargetGroups = (byte)4
                        },
                        new
                        {
                            GroupId = -1,
                            Source = "face-masks",
                            AccessRestrictedByRole = false,
                            RequestHelpFormVariant = (byte)5,
                            RequestorDefinedByGroup = false,
                            RequestsRequireApproval = false,
                            SuppressRecipientPersonalDetails = false,
                            TargetGroups = (byte)4
                        },
                        new
                        {
                            GroupId = -6,
                            Source = "",
                            AccessRestrictedByRole = false,
                            RequestHelpFormVariant = (byte)7,
                            RequestorDefinedByGroup = false,
                            RequestsRequireApproval = false,
                            SuppressRecipientPersonalDetails = false,
                            TargetGroups = (byte)0
                        },
                        new
                        {
                            GroupId = -7,
                            Source = "a",
                            AccessRestrictedByRole = true,
                            RequestHelpFormVariant = (byte)8,
                            RequestorDefinedByGroup = true,
                            RequestsRequireApproval = false,
                            SuppressRecipientPersonalDetails = false,
                            TargetGroups = (byte)0
                        },
                        new
                        {
                            GroupId = -22,
                            Source = "a",
                            AccessRestrictedByRole = true,
                            RequestHelpFormVariant = (byte)19,
                            RequestorDefinedByGroup = false,
                            RequestsRequireApproval = false,
                            SuppressRecipientPersonalDetails = false,
                            TargetGroups = (byte)0
                        },
                        new
                        {
                            GroupId = -31,
                            Source = "",
                            AccessRestrictedByRole = false,
                            RequestHelpFormVariant = (byte)25,
                            RequestorDefinedByGroup = false,
                            RequestsRequireApproval = false,
                            SuppressRecipientPersonalDetails = false,
                            TargetGroups = (byte)4
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.RequestorDetails", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AddressLine3")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Locality")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MobilePhone")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("OtherPhone")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Postcode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("GroupId");

                    b.ToTable("RequestorDetails","Group");

                    b.HasData(
                        new
                        {
                            GroupId = -7,
                            AddressLine1 = "Age UK Wirral",
                            AddressLine2 = "Devonshire Resource Centre",
                            AddressLine3 = "141 Park Road North",
                            EmailAddress = "practicalsupportteam@ageukwirral.org.uk",
                            FirstName = "Age UK",
                            LastName = "Wirral",
                            Locality = "Birkenhead",
                            OtherPhone = "0151 482 3456",
                            Postcode = "CH41 0DD"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.SecurityConfiguration", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<bool>("AllowAutonomousJoinersAndLeavers")
                        .HasColumnName("AllowAutonomousJoinersAndLeavers")
                        .HasColumnType("bit");

                    b.HasKey("GroupId");

                    b.ToTable("SecurityConfiguration","Group");

                    b.HasData(
                        new
                        {
                            GroupId = -6,
                            AllowAutonomousJoinersAndLeavers = true
                        },
                        new
                        {
                            GroupId = -7,
                            AllowAutonomousJoinersAndLeavers = true
                        },
                        new
                        {
                            GroupId = -31,
                            AllowAutonomousJoinersAndLeavers = true
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.SupportActivityConfiguration", b =>
                {
                    b.Property<int>("SupportActivityId")
                        .HasColumnName("SupportActivityID")
                        .HasColumnType("int");

                    b.Property<bool>("AutoSignUpWhenOtherSelected")
                        .HasColumnType("bit");

                    b.HasKey("SupportActivityId");

                    b.ToTable("SupportActivity","Configuration");

                    b.HasData(
                        new
                        {
                            SupportActivityId = 1,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 2,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 3,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 4,
                            AutoSignUpWhenOtherSelected = false
                        },
                        new
                        {
                            SupportActivityId = 5,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 6,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 7,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 8,
                            AutoSignUpWhenOtherSelected = false
                        },
                        new
                        {
                            SupportActivityId = 9,
                            AutoSignUpWhenOtherSelected = false
                        },
                        new
                        {
                            SupportActivityId = 10,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 11,
                            AutoSignUpWhenOtherSelected = false
                        },
                        new
                        {
                            SupportActivityId = 12,
                            AutoSignUpWhenOtherSelected = false
                        },
                        new
                        {
                            SupportActivityId = 13,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 14,
                            AutoSignUpWhenOtherSelected = false
                        },
                        new
                        {
                            SupportActivityId = 15,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 16,
                            AutoSignUpWhenOtherSelected = false
                        },
                        new
                        {
                            SupportActivityId = 21,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 22,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 23,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 24,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 25,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 26,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 27,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 28,
                            AutoSignUpWhenOtherSelected = false
                        },
                        new
                        {
                            SupportActivityId = 29,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 30,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 31,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 32,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 33,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 34,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 35,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 36,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 37,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 38,
                            AutoSignUpWhenOtherSelected = true
                        },
                        new
                        {
                            SupportActivityId = 39,
                            AutoSignUpWhenOtherSelected = true
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.SupportActivityInstructions", b =>
                {
                    b.Property<short>("SupportActivityInstructionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupportActivityInstructionsID")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("SupportActivityInstructionsId");

                    b.ToTable("SupportActivityInstructions","Group");

                    b.HasData(
                        new
                        {
                            SupportActivityInstructionsId = (short)22,
                            Instructions = "{\"SupportActivityInstructions\":22,\"ActivityDetails\":\"Vaccination programme support volunteers are needed to help things run smoothly at local COVID-19 vaccination centres. Duties may vary by location and could include a range of indoor or outdoor activities, such as: helping patients find their way around the vaccination centre, providing assistance and reassurance to patients while they are on site, general domestic duties (e.g. wiping down furniture and restocking sanitisation stations). You do not need a clinical background or any specialist skills to accept this role and basic training will be provided on the day. For a fuller description please see the volunteer instructions which are available when you click to accept the shift or by clicking “View more info” on accepted shifts in the “My Shifts” tab.\",\"Intro\":null,\"Steps\":[{\"Heading\":\"Check the request details\",\"Detail\":\"Please read the [role description and useful information](/pdf/lincs-vaccination-support/lincs-vaccination-support-role-description.pdf) attachment for full details of the role. Volunteers may also be asked to participate in regular lateral flow testing, you can find more information [here](/pdf/lincs-vaccination-support/lateral-flow-testing-for-vaccination-support-volunteers.pdf).\"},{\"Heading\":\"Attending your shift\",\"Detail\":\"You’ll receive a reminder email the day before your shift. Make sure to bring a face covering and appropriate clothing for the weather (e.g. a warm / waterproof coat). Once you’ve completed a shift it will be marked as complete automatically. You’ll still be able to find all the details in the “My Shifts” tab but searching for shifts with the status “Done”.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know as soon as possible by updating the accepted request and clicking “Can’t Do” so we can find another volunteer.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)1,
                            Instructions = "{\"SupportActivityInstructions\":1,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Contact the requester\",\"Detail\":\"Confirm what they need and agree how it will be paid for. You can find out more about secure payment methods in our [FAQs](/questions#5). If someone else has requested the help on their behalf it may be useful to give them a call too.\"},{\"Heading\":\"Provide help\",\"Detail\":\"Pick up their shopping and drop it off at their door. Make sure you keep a copy of the receipt (e.g. by taking a photo) and give them the original along with their shopping.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us and anyone else involved with the request know it’s been completed. You’ll still be able to find their contact details in “My Requests” in case you need to get back in touch.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)2,
                            Instructions = "{\"SupportActivityInstructions\":2,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Contact the requester\",\"Detail\":\"Confirm what they need. Check if there will be a charge for anything, and if needed agree how it will be paid for. You can find out more about secure payment methods in our [FAQs](/questions#5). If someone else has requested the help on their behalf it may be useful to give them a call too.\"},{\"Heading\":\"Provide help\",\"Detail\":\"Provide the help they need. If you do have to pay for something on their behalf, make sure you keep a copy of the receipt (e.g. by taking a photo) and give them the original along with their purchase.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it’s been completed. You’ll still be able to find their contact details in “My Requests” in case you need to get back in touch.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)3,
                            Instructions = "{\"SupportActivityInstructions\":3,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Contact the requester\",\"Detail\":\"Get in touch with the person who needs the help to confirm what they need. If someone else has requested the help on their behalf it may be useful to give them a call too.\"},{\"Heading\":\"Provide help\",\"Detail\":\"Provide the help that’s needed.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it’s been completed. You’ll still be able to find their contact details in “My Requests” in case you need to get back in touch.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)4,
                            Instructions = "{\"SupportActivityInstructions\":4,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Give them a call\",\"Detail\":\"Be a friendly voice at the end of the phone and have a good chat.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it’s been completed. You’ll still be able to find their contact details in “My Requests” in case you need to get back in touch. If someone else has requested the help on their behalf it may be useful to give them a call to let them know how it went.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)5,
                            Instructions = "{\"SupportActivityInstructions\":5,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Contact the requester\",\"Detail\":\"Get in touch to find out how you can help.\"},{\"Heading\":\"Solve the problem… hopefully!\",\"Detail\":\"If you’re able, give them the support they need.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it’s been completed. You’ll still be able to find their contact details in “My Requests” in case you need to get back in touch.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due (including if you don’t know the answer!), let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)6,
                            Instructions = "{\"SupportActivityInstructions\":6,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Check in\",\"Detail\":\"Give them a call or knock on the door to find out if they’re OK. You can also see if they need anything and let them know someone’s asking after them.\"},{\"Heading\":\"Contact the requester\",\"Detail\":\"A check in is usually requested by someone else for a friend, neighbour or loved one. Give the person who requested the help a call to let them know how it went.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it’s been completed. You’ll still be able to find their contact details in “My Requests” in case you need to get back in touch.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)7,
                            Instructions = "{\"SupportActivityInstructions\":7,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Contact the requester\",\"Detail\":\"Confirm what they need and agree how they will pay you back (£2 - £3 per face covering to cover the cost of materials plus the cost of postage if required). You can find out more about secure payment methods in our [FAQs](/questions#5).\"},{\"Heading\":\"Provide help\",\"Detail\":\"Make the face coverings and deliver them (or pop them in the post). If you need to claim back the cost of postage don’t forget to keep a copy of the receipt.\"},{\"Heading\":\"Let them know they’re on the way\",\"Detail\":\"Drop the recipient a note to let them know they’re on the way.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it’s been completed. You’ll still be able to find their contact details in “My Requests” in case you need to get back in touch.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)10,
                            Instructions = "{\"SupportActivityInstructions\":10,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Go shopping\",\"Detail\":\"Pick up their shopping, you will find their shopping list and any specific instructions in “My Requests”. You’ll need to pay for the shopping on your own card before claiming the money back.\"},{\"Heading\":\"Send us a copy of the receipt\",\"Detail\":\"Write the name of the client on the receipt and email us a photograph to mailto:emergencyvols@ageukwirral.org.uk. We’ll transfer the money as soon as possible via bank transfer.\"},{\"Heading\":\"Drop off the shopping\",\"Detail\":\"Drop off the shopping along with the original copy of the receipt. You’ll find their details in “My Requests”.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it’s been completed. If you have any concerns about the person you visited let us know immediately by emailing mailto:practicalsupportteam@ageukwirral.org.uk.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)11,
                            Instructions = "{\"SupportActivityInstructions\":11,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Collect the prescription\",\"Detail\":\"Collect the prescription from the pharmacy, you will find details of the pharmacy in “My Requests”. If the prescription needs paying for, you’ll need to pay for it on your own card before claiming the money back.\"},{\"Heading\":\"Send us a copy of the receipt (if you paid)\",\"Detail\":\"If you paid for the prescription, write the name of the client on the receipt and email us a photograph to mailto:emergencyvols@ageukwirral.org.uk. We’ll transfer the money as soon as possible via bank transfer.\"},{\"Heading\":\"Drop off the medication\",\"Detail\":\"Drop off the medication (along with the original copy of the receipt if you paid for it). You’ll find their details in “My Requests”\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it’s been completed. If you have any concerns about the person you visited let us know immediately by emailing mailto:practicalsupportteam@ageukwirral.org.uk.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)41,
                            Instructions = "{\"SupportActivityInstructions\":41,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Find out what help is needed\",\"Detail\":\"Make sure you’ve seen all the details by clicking the “View more info” link. If you’re able to help, click to accept the request.\"},{\"Heading\":\"Provide the help that is needed\",\"Detail\":\"Use the details given to you to carry out the request.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it’s been completed. You’ll still be able to find their contact details in “My Requests” in case you need to get back in touch.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)12,
                            Instructions = "{\"SupportActivityInstructions\":12,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Provide help\",\"Detail\":\"Provide the help that’s needed.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it’s been completed. You’ll still be able to find their contact details in “My Requests” in case you need to get back in touch.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)18,
                            Instructions = "{\"SupportActivityInstructions\":18,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Find out what help is needed\",\"Detail\":\"Make sure you’ve seen all the details by clicking the “View more info” link. If you’re able to help, click to accept the request.\"},{\"Heading\":\"Provide the help that is needed\",\"Detail\":\"Use the details given to you to carry out the request.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests”.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)33,
                            Instructions = "{\"SupportActivityInstructions\":33,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Find out what help is needed\",\"Detail\":\"Make sure you’ve seen all the details by clicking the “View more info” link. If you’re able to help, click to accept the request.\"},{\"Heading\":\"Provide the help that is needed\",\"Detail\":\"Use the details given to you to carry out the request.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you’re finished, mark the request as complete in “My Requests”.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”.\"}"
                        },
                        new
                        {
                            SupportActivityInstructionsId = (short)57,
                            Instructions = "{\"SupportActivityInstructions\":57,\"ActivityDetails\":null,\"Intro\":null,\"Steps\":[{\"Heading\":\"Contact the requester\",\"Detail\":\"Confirm when the prescription will be ready and when you will deliver. Check if there will be a charge for anything, and if needed agree how it will be paid for. You can find out more about secure payment methods in our [FAQs](/questions#5). If someone else has requested the help on their behalf it may be useful to give them a call too.\"},{\"Heading\":\"Provide help\",\"Detail\":\"Provide the help they need. If you do have to pay for something on their behalf, make sure you keep a copy of the receipt (e.g. by taking a photo) and give them the original along with their prescription.\"},{\"Heading\":\"Mark the request as complete\",\"Detail\":\"When you're finished, mark the request as complete in “My Requests” - this will let us (and anyone else involved with the request) know it's been completed. You’ll still be able to find their contact details in “My Requests” in case you need to get back in touch.\"}],\"Close\":\"If for any reason you can’t complete the request before it’s due, let us know by updating the accepted request and clicking “Can’t Do”. In the event that the prescription is not available for delivery please inform the requester/client and rearrange delivery if possible. If you are unable to do delivery at another time remember to mark as “Can’t Do”.\"}"
                        });
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.UserCredential", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<int>("CredentialId")
                        .HasColumnName("CredentialID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("AuthorisedByUserId")
                        .HasColumnName("AuthorisedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Reference")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime");

                    b.HasKey("GroupId", "UserId", "CredentialId", "DateAdded");

                    b.HasIndex("GroupId", "CredentialId");

                    b.ToTable("UserCredential","Group");
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.UserRole", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleID")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "UserId", "RoleId");

                    b.ToTable("UserRole","Group");
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.UserRoleAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ActionId")
                        .HasColumnName("ActionID")
                        .HasColumnType("tinyint");

                    b.Property<int>("AuthorisedByUserId")
                        .HasColumnName("AuthorisedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleID")
                        .HasColumnType("int");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("UserRoleAudit","Group");
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.ActivityCredentialSet", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithMany("ActivityCredentialSet")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_ActivityCredentialSet_GroupID")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.CredentialSet", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.GroupCredential", "GroupCredential")
                        .WithMany("CredentialSet")
                        .HasForeignKey("GroupId", "CredentialId")
                        .HasConstraintName("FK_CredentialSet_CredentialID")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.Group", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "ParentGroup")
                        .WithMany("InverseParentGroup")
                        .HasForeignKey("ParentGroupId");
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupCredential", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Credential", "Credential")
                        .WithMany("GroupCredential")
                        .HasForeignKey("CredentialId")
                        .HasConstraintName("FK_GroupCredential_CredentialID")
                        .IsRequired();

                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithMany("GroupCredential")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_GroupCredential_Group")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupEmailConfiguration", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithMany("GroupEmailConfiguration")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_GroupEmailConfiguration_GroupID")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupLocation", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithMany("GroupLocation")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_GroupLocation_Group")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupMapDetails", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithMany("GroupMapDetails")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_GroupCredential_GroupMapDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupNewRequestNotificationStrategy", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithOne("NewRequestNotificationStrategy")
                        .HasForeignKey("GroupService.Repo.EntityFramework.Entities.GroupNewRequestNotificationStrategy", "GroupId")
                        .HasConstraintName("FK_NewRequestNotificationStrategy_Group")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.GroupSupportActivityConfiguration", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithMany("GroupSupportActivityInstructions")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_GroupSupportActivityInstructions_GroupID")
                        .IsRequired();

                    b.HasOne("GroupService.Repo.EntityFramework.Entities.SupportActivityInstructions", "SupportActivityInstructions")
                        .WithMany("GroupSupportActivityInstructions")
                        .HasForeignKey("SupportActivityInstructionsId")
                        .HasConstraintName("FK_GroupSupportActivityInstructions_SupportActivityInstructionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.RegistrationJourney", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithMany("RegistrationJourney")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_RegistrationJourney_Group")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.RequestHelpJourney", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithMany("RequestHelpJourney")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_RequestHelpJourney_Group")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.RequestorDetails", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithOne("RequestorDetails")
                        .HasForeignKey("GroupService.Repo.EntityFramework.Entities.RequestorDetails", "GroupId")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.SecurityConfiguration", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithOne("SecurityConfiguration")
                        .HasForeignKey("GroupService.Repo.EntityFramework.Entities.SecurityConfiguration", "GroupId")
                        .HasConstraintName("FK_SecurityConfiguration_Group")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.UserCredential", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.GroupCredential", "GroupCredential")
                        .WithMany("UserCredential")
                        .HasForeignKey("GroupId", "CredentialId")
                        .HasConstraintName("FK_UserCredential_CredentialID")
                        .IsRequired();
                });

            modelBuilder.Entity("GroupService.Repo.EntityFramework.Entities.UserRole", b =>
                {
                    b.HasOne("GroupService.Repo.EntityFramework.Entities.Group", "Group")
                        .WithMany("UserRole")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Role_Group")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
